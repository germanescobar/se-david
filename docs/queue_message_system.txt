Research:

Which Queue system should use:

http://dmitrypol.github.io/redis/rabbitmq/sqs/2017/12/17/queues.html

In the previews link a fully and comprensible summary and description of the most
important queue systems is provided. First if the project is dealing
with ruby, rails has a native solution for queueing via DB by the
delay jobs. This solution is easy to implement and suitable for small
applications given that the DB can be overcharged in bigger systems.

Then Sidkid and redis is presented. This is the more complete queue system
having many datastructures such as sets,lists hash tables and more to store
the data and manage the queue application.

After that AWS SQS system offers via shoryuken a reliable system for
handling queuing. This has less power in terms of performance but has
the advantage of AWS support and reliability.

[] Lastly is  RabbimMQ, which is shown as a novel option suitable for
complex and multiple threads operations...

"Conclusion
So which queue technology should we use? There is no easy answer and it really depends on our needs. Personally I really like the abstraction provided by Active Job (even though it does not support all features provided by some queue backends). It makes it easier to structure jobs in a standard way and switch between queues when needed. If I were building a simple system I would start with DelayedJob. Then I would upgrade to Sidekiq (especially if I were already using Redis). Then investigate SQS for very large scale and RabbitMQ for complex workflows."

apache kafka vs rabbitmq

https://data-flair.training/blogs/kafka-vs-rabbitmq/
https://www.quora.com/What-are-the-differences-between-Apache-Kafka-and-RabbitMQ

Different elements on its implementation

Storage
 DB
 Redis
 SQS
 RabbitMQ
  installation:
     https://www.vultr.com/docs/how-to-install-rabbitmq-on-ubuntu-16-04-47
     rabbitmq tuturials
       https://www.rabbitmq.com/tutorials/tutorial-one-spring-amqp.html
  bunny docs:
    http://rubybunny.info/articles/getting_started.html

    github module Bunny
      https://github.com/ruby-amqp/bunny/blob/master/lib/bunny/consumer.rb
Background Jobs:
 DelayJobs
   Can be installed in rails applications by delay_jobs_active_record. That means that you will depend on
   Active record managment DB. It is said that daleyjobs also handle Data Mapper and Mongo.

   Delay:job:work creates a background process to handle the process.
   Disable in test environment could be usefull.
 Resque
 Sidekiq
   "Sidekiq is an open source job scheduler written in Ruby. It's important to be aware that Sidekiq by default doesn't do scheduling, it on      ly executes jobs."
   Is a gem to handle process that goes to background job in redis.
  Sidekiq allows you to move jobs into the background for asynchronous processing. It uses threads instead of forks so it is much more efficient with memory compared to Resque

http://railscasts.com/episodes/366-sidekiq

 Shoryuken (Sidekiq adapted for Redis)

Rescue

https://github.com/resque/resque
Shoryuken sho-ryu-ken is a super-efficient Amazon SQS thread-based message processor.


https://github.com/phstc/shoryuken
ruby docs:
https://www.rubydoc.info/github/phstc/shoryuken/Shoryuken
